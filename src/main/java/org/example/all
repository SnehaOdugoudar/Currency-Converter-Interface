package org.example.filehandler;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;
import org.example.model.TransactionData;
import org.example.model.TransactionData.Transaction;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CSVFileHandler implements IFileHandler {

    @Override
    public TransactionData readData(String fileName) throws IOException {
        List<Transaction> transactions = new ArrayList<>();

        try (FileReader reader = new FileReader(fileName);
             CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withFirstRecordAsHeader())) {
            for (CSVRecord csvRecord : csvParser) {
                Transaction transaction = new Transaction();
                transaction.setAmount(Double.parseDouble(csvRecord.get("Amount")));
                transaction.setCurrency(csvRecord.get("Currency"));
                transaction.setTargetCurrency(csvRecord.get("TargetCurrency"));
                transactions.add(transaction);
            }
        }

        TransactionData transactionData = new TransactionData();
        transactionData.setTransactions(transactions);
        return transactionData;
    }

    @Override
    public void writeData(TransactionData data, String fileName) throws IOException {
        try (FileWriter writer = new FileWriter(fileName);
             CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT
                     .withHeader("Amount", "Currency", "TargetCurrency", "ConvertedAmount", "Status", "Error"))) {
            for (Transaction transaction : data.getTransactions()) {
                csvPrinter.printRecord(
                        transaction.getAmount(),
                        transaction.getCurrency(),
                        transaction.getTargetCurrency(),
                        transaction.getConvertedAmount(),
                        transaction.getStatus(),
                        transaction.getError()
                );
            }
            csvPrinter.flush();
        }
    }
}



package org.example.filehandler;

import org.example.model.TransactionData;
import java.io.IOException;
//import java.io.IOException;

public interface IFileHandler {
    TransactionData readData(String fileName) throws IOException;
    void writeData(TransactionData data, String fileName) throws IOException;
}
package org.example.filehandler;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.example.model.TransactionData;

import java.io.File;
import java.io.IOException;

public class JSONFileHandler implements IFileHandler {
    private final ObjectMapper objectMapper;

    public JSONFileHandler() {
        // Initialize ObjectMapper
        objectMapper = new ObjectMapper();
        objectMapper.enable(SerializationFeature.INDENT_OUTPUT); // Enable pretty printing
    }

    @Override
    public TransactionData readData(String fileName) throws IOException {
        // Read transaction data from JSON file
        return objectMapper.readValue(new File(fileName), TransactionData.class);
    }

    @Override
    public void writeData(TransactionData data, String fileName) throws IOException {
        // Write transaction data to JSON file
        objectMapper.writeValue(new File(fileName), data);
    }
}
package org.example.filehandler;

import org.example.model.TransactionData;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.IOException;

public class XMLFileHandler implements IFileHandler {

    @Override
    public TransactionData readData(String fileName) throws IOException {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(new File(fileName));
            Element root = doc.getDocumentElement();

            TransactionData transactionData = new TransactionData();
            NodeList transactionList = root.getElementsByTagName("transaction");

            for (int i = 0; i < transactionList.getLength(); i++) {
                Element transactionElement = (Element) transactionList.item(i);
                int amount = Integer.parseInt(transactionElement.getElementsByTagName("amount").item(0).getTextContent());
                String currency = transactionElement.getElementsByTagName("currency").item(0).getTextContent();
                String targetCurrency = transactionElement.getElementsByTagName("targetCurrency").item(0).getTextContent();

                // Create new Transaction object and add it directly to TransactionData
                TransactionData.Transaction transaction = new TransactionData.Transaction();
                transaction.setAmount(amount);
                transaction.setCurrency(currency);
                transaction.setTargetCurrency(targetCurrency);
                transactionData.getTransactions().add(transaction);
            }

            return transactionData;
        } catch (ParserConfigurationException | org.xml.sax.SAXException e) {
            e.printStackTrace();
            throw new IOException("Error reading XML file: " + e.getMessage());
        }
    }


    @Override
    public void writeData(TransactionData data, String fileName) throws IOException {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.newDocument();

            Element root = doc.createElement("TransactionData");
            doc.appendChild(root);

            for (TransactionData.Transaction transaction : data.getTransactions()) {
                Element transactionElement = doc.createElement("transaction");

                Element amountElement = doc.createElement("amount");
                amountElement.appendChild(doc.createTextNode(String.valueOf(transaction.getAmount())));
                transactionElement.appendChild(amountElement);

                Element currencyElement = doc.createElement("currency");
                currencyElement.appendChild(doc.createTextNode(transaction.getCurrency()));
                transactionElement.appendChild(currencyElement);

                Element targetCurrencyElement = doc.createElement("targetCurrency");
                targetCurrencyElement.appendChild(doc.createTextNode(transaction.getTargetCurrency()));
                transactionElement.appendChild(targetCurrencyElement);

                root.appendChild(transactionElement);
            }

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");

            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(fileName));
            transformer.transform(source, result);
        } catch (ParserConfigurationException | TransformerException e) {
            e.printStackTrace();
            throw new IOException("Error writing XML file: " + e.getMessage());
        }
    }
}
package org.example.model;

import java.util.ArrayList;
import java.util.List;

public class TransactionData {
    private List<Transaction> transactions = new ArrayList<>(); // Initialize the list

    public List<Transaction> getTransactions() {
        return transactions;
    }

    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }

    public static class Transaction {
        private double amount;
        private String currency;
        private String targetCurrency;
        private double convertedAmount;
        private String status;
        private String error;

        // Getters and setters...

        public double getAmount() {
            return amount;
        }

        public void setAmount(double amount) {
            this.amount = amount;
        }

        public String getCurrency() {
            return currency;
        }

        public void setCurrency(String currency) {
            this.currency = currency;
        }

        public String getTargetCurrency() {
            return targetCurrency;
        }

        public void setTargetCurrency(String targetCurrency) {
            this.targetCurrency = targetCurrency;
        }

        public double getConvertedAmount() {
            return convertedAmount;
        }

        public void setConvertedAmount(double convertedAmount) {
            this.convertedAmount = convertedAmount;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
}











//package org.example.model;
//
//import javax.xml.bind.annotation.XmlAccessType;
//import javax.xml.bind.annotation.XmlAccessorType;
//import javax.xml.bind.annotation.XmlElement;
//import javax.xml.bind.annotation.XmlRootElement;
//import java.util.ArrayList;
//import java.util.List;
//
//@XmlRootElement(name = "transactionData") // Specify the root element name
//public class TransactionData {
//    private List<Transaction> transactions = new ArrayList<>(); // Initialize the list
//
//    @XmlElement(name = "transaction") // Specify the element name for each transaction
//    public List<Transaction> getTransactions() {
//        return transactions;
//    }
//
//    public void setTransactions(List<Transaction> transactions) {
//        this.transactions = transactions;
//    }
//
//    @XmlAccessorType(XmlAccessType.FIELD)
//    public static class Transaction {
//        private double amount;
//        private String currency;
//        private String targetCurrency;
//        private double convertedAmount;
//        private String status;
//        private String error;
//
//        // Getters and setters...
//
//        public double getAmount() {
//            return amount;
//        }
//
//        public void setAmount(double amount) {
//            this.amount = amount;
//        }
//
//        public String getCurrency() {
//            return currency;
//        }
//
//        public void setCurrency(String currency) {
//            this.currency = currency;
//        }
//
//        public String getTargetCurrency() {
//            return targetCurrency;
//        }
//
//        public void setTargetCurrency(String targetCurrency) {
//            this.targetCurrency = targetCurrency;
//        }
//
//        public double getConvertedAmount() {
//            return convertedAmount;
//        }
//
//        public void setConvertedAmount(double convertedAmount) {
//            this.convertedAmount = convertedAmount;
//        }
//
//        public String getStatus() {
//            return status;
//        }
//
//        public void setStatus(String status) {
//            this.status = status;
//        }
//
//        public String getError() {
//            return error;
//        }
//
//        public void setError(String error) {
//            this.error = error;
//        }
//    }
//}
package org.example.service;

import org.example.model.TransactionData;
import org.example.model.TransactionData.Transaction;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class CurrencyConverter {
    private static final Map<String, Double> exchangeRates = new HashMap<>();
    private static final Set<String> visited = new HashSet<>();

    static {
        // Initialize exchange rates
        exchangeRates.put("USD-EUR", 0.94);
        exchangeRates.put("EUR-GBP", 0.86);
        exchangeRates.put("GBP-INR", 103.98);
        exchangeRates.put("AUD-CAD", 0.89);
        exchangeRates.put("CAD-USD", 0.73);
        exchangeRates.put("CHF-AUD", 1.69);
        exchangeRates.put("USD-CHF", 0.91);
        exchangeRates.put("JPY-USD", 0.0065);
        // ... Add other rates as needed
    }

    public static void convert(TransactionData data) {

        for (Transaction transaction : data.getTransactions()) {
            double convertedAmount = dfs(transaction.getCurrency(), transaction.getTargetCurrency(), transaction.getAmount(), new HashSet<>());
            if (convertedAmount != -1) {
                transaction.setConvertedAmount(convertedAmount);
                transaction.setStatus("Success");
                System.out.println("This is here 1j");
            } else {
                transaction.setError("Invalid currency code or conversion rate not available.");
                transaction.setStatus("Failed");
            }
        }
    }

    private static double dfs(String sourceCurrency, String targetCurrency, double amount, Set<String> visitedCurrencies) {
        String key = STR."\{sourceCurrency}-\{targetCurrency}";
        if (visited.contains(key)) {
            return -1; // Detected cycle, return -1 indicating failure
        }
        if (exchangeRates.containsKey(key)) {
            return amount * exchangeRates.get(key); // Found conversion rate
        }
        visited.add(key);
        for (Map.Entry<String, Double> entry : exchangeRates.entrySet()) {
            String[] currencies = entry.getKey().split("-");
            if (currencies[0].equals(sourceCurrency)) {
                double convertedAmount = dfs(currencies[1], targetCurrency, amount * entry.getValue(), visitedCurrencies);
                if (convertedAmount != -1) {
                    visited.remove(key); // Backtrack
                    return convertedAmount;
                }
            }
        }
        visited.remove(key); // Backtrack
        return -1; // Conversion rate not found
    }
}










//package org.example.service;
//
//import org.example.model.TransactionData;
//import org.example.model.TransactionData.Transaction;
//import java.util.Map;
//import java.util.HashMap;
//
//public class CurrencyConverter {
//    private static final Map<String, Double> exchangeRates = new HashMap<>();
//
//
//    static {
//        // Initialize exchange rates
//        exchangeRates.put("USD-EUR", 0.94);
//        exchangeRates.put("EUR-GBP", 0.86);
//        exchangeRates.put("GBP-INR", 103.98);
//        exchangeRates.put("AUD-CAD", 0.89);
//        exchangeRates.put("CAD-USD", 0.73);
//        exchangeRates.put("CHF-AUD", 1.69);
//        exchangeRates.put("USD-CHF", 0.91);
//        exchangeRates.put("JPY-USD", 0.0065);
//        // ... Add other rates as needed
//    }
//
//    public static void convert(TransactionData data) {
//        for (Transaction transaction : data.getTransactions()) {
//            String key = STR."\{transaction.getCurrency()}-\{transaction.getTargetCurrency()}";
//            Double rate = exchangeRates.get(key);
//            if (rate != null) {
//                transaction.setConvertedAmount(transaction.getAmount() * rate);
//                transaction.setStatus("Success");
//            } else {
//                transaction.setError("Invalid currency code or conversion rate not available.");
//                transaction.setStatus("Failed");
//            }
//        }
//    }
//}
package org.example.service;

import org.example.filehandler.IFileHandler;
import org.example.model.TransactionData;
import org.example.util.FileHandlerFactory;
import org.example.util.FileTypeUtil;

import java.io.IOException;

public class FileProcessor {
    public void processFile(String inputFileName, String outputFileName) throws IOException {
        System.out.println("This is here 1");
        IFileHandler fileHandler = FileHandlerFactory.getFileHandler(FileTypeUtil.determineFileType(inputFileName));
        System.out.println("This is here");

        if (fileHandler == null) {
            throw new IOException(STR."Unsupported file type for file: \{inputFileName}");
        }
        TransactionData data = fileHandler.readData(inputFileName);

        CurrencyConverter.convert(data);

        fileHandler.writeData(data, outputFileName);
    }
}
package org.example.util;

import org.example.filehandler.CSVFileHandler;
import org.example.filehandler.IFileHandler;
import org.example.filehandler.JSONFileHandler;
import org.example.filehandler.XMLFileHandler;

public class FileHandlerFactory {
    public static IFileHandler getFileHandler(FileTypeUtil.FileType fileType) {
        System.out.println(fileType);
        return switch (fileType) {
            case CSV -> new CSVFileHandler();
            case JSON -> new JSONFileHandler();
            case XML -> new XMLFileHandler();
            // Add cases for other file types as necessary
            default -> throw new IllegalArgumentException(STR."Unsupported file type: \{fileType}");
        };
    }
}
package org.example.util;

public class FileTypeUtil {
    public static FileType determineFileType(String fileName) {
        if (fileName.endsWith(".json")) {
            return FileType.JSON;
        } else if (fileName.endsWith(".csv")) {
            return FileType.CSV;
        } else if (fileName.endsWith(".xml")) {
            return FileType.XML;
        } else {
            return FileType.UNKNOWN;
        }
    }

    public enum FileType {
        CSV, JSON, XML, UNKNOWN
    }
}
package org.example;

import org.example.service.FileProcessor;

import static java.lang.StringTemplate.STR;

public class Main {
    public static void main(String[] args) {
        if (args.length != 2) {
            System.err.println("Usage: Main <input file> <output file>");
            System.exit(1);
        }

        String inputFileName = args[0];
        String outputFileName = args[1];

        FileProcessor processor = new FileProcessor();
        try {
            processor.processFile(inputFileName, outputFileName);
            System.out.println("Conversion completed successfully.");
        } catch (Exception e) {
            System.err.println("An error occurred during file processing: " + e.getMessage());

//            System.err.println(STR."An error occurred during file processing: \{e.getMessage()}");
//            e.printStackTrace();
        }
    }
}
