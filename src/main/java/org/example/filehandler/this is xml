
//package org.example.filehandler;
//
//import org.example.model.TransactionData;
//import org.example.model.TransactionData.Transaction;
//import org.json.JSONArray;
//import org.json.JSONObject;
//
//import java.io.*;
//import java.nio.file.Files;
//import java.nio.file.Paths;
//import java.util.ArrayList;
//import java.util.List;
//
//public class JSONFileHandler implements IFileHandler {
//
//    @Override
//    public TransactionData readData(String fileName) throws IOException {
//        String content = new String(Files.readAllBytes(Paths.get(fileName)));
//        JSONObject jsonObject = new JSONObject(content);
//        JSONArray transactionsArray = jsonObject.getJSONArray("transactions");
//
//        List<Transaction> transactions = new ArrayList<>();
//        for (int i = 0; i < transactionsArray.length(); i++) {
//            JSONObject transactionObject = transactionsArray.getJSONObject(i);
//            Transaction transaction = new Transaction();
//            transaction.setAmount(transactionObject.getDouble("Amount"));
//            transaction.setCurrency(transactionObject.getString("OriginalCurrency"));
//            transaction.setTargetCurrency(transactionObject.getString("TargetCurrency"));
//            transactions.add(transaction);
//        }
//
//        TransactionData transactionData = new TransactionData();
//        transactionData.setTransactions(transactions);
//        return transactionData;
//    }
//
//    @Override
//    public void writeData(TransactionData data, String fileName) throws IOException {
//        JSONArray transactionsArray = new JSONArray();
//        for (Transaction transaction : data.getTransactions()) {
//            JSONObject transactionObject = new JSONObject();
//            transactionObject.put("Amount", transaction.getAmount());
//            transactionObject.put("OriginalCurrency", transaction.getCurrency());
//            transactionObject.put("TargetCurrency", transaction.getTargetCurrency());
//            transactionObject.put("ConvertedAmount", transaction.getConvertedAmount());
//            transactionObject.put("Status", transaction.getStatus());
//            transactionObject.put("Error", transaction.getError());
//            transactionsArray.put(transactionObject);
//        }
//
//        JSONObject root = new JSONObject();
//        root.put("transactions", transactionsArray);
//
//        try (FileWriter writer = new FileWriter(fileName)) {
//            writer.write(root.toString(4));  // Indent with 4 spaces for readability
//        }
//    }
//}
//
//
//

//package org.example.filehandler;
//
//import com.fasterxml.jackson.databind.DeserializationFeature;
//import com.fasterxml.jackson.databind.MapperFeature;
//import com.fasterxml.jackson.databind.ObjectMapper;
//import com.fasterxml.jackson.databind.SerializationFeature;
//import org.example.model.TransactionData;
//
//import java.io.File;
//import java.io.IOException;
//
//public class JSONFileHandler implements IFileHandler {
//    private final ObjectMapper objectMapper;
//
//    public JSONFileHandler() {
//        // Initialize ObjectMapper
//        objectMapper = new ObjectMapper();
//        objectMapper.enable(SerializationFeature.INDENT_OUTPUT); // Enable pretty printing
//        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
//        objectMapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true); // Ignore case in property names
//    }
//
//    @Override
//    public TransactionData readData(String fileName) throws IOException {
//        // Read transaction data from JSON file
//        System.out.println("This is here in json");
//        return objectMapper.readValue(new File(fileName), TransactionData.class);
//    }
//
//    @Override
//    public void writeData(TransactionData data, String fileName) throws IOException {
//        // Write transaction data to JSON file
//
//        objectMapper.writeValue(new File(fileName), data);
//    }
//}
package org.example.filehandler;

import org.example.model.TransactionData;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.IOException;

public class XMLFileHandler implements IFileHandler {
 @Override
    public TransactionData readData(String fileName) throws IOException {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(new File(fileName));
            Element root = doc.getDocumentElement();

            TransactionData transactionData = new TransactionData();
            NodeList transactionList = root.getElementsByTagName("transaction");

            for (int i = 0; i < transactionList.getLength(); i++) {
                Element transactionElement = (Element) transactionList.item(i);
                int amount = Integer.parseInt(transactionElement.getElementsByTagName("amount").item(0).getTextContent());
                String currency = transactionElement.getElementsByTagName("currency").item(0).getTextContent();
                String targetCurrency = transactionElement.getElementsByTagName("targetCurrency").item(0).getTextContent();

                // Create new Transaction object and add it directly to TransactionData
                TransactionData.Transaction transaction = new TransactionData.Transaction();
                transaction.setAmount(amount);
                transaction.setCurrency(currency);
                transaction.setTargetCurrency(targetCurrency);
                transactionData.getTransactions().add(transaction);
            }

            return transactionData;
        } catch (ParserConfigurationException | org.xml.sax.SAXException e) {
            e.printStackTrace();
            throw new IOException("Error reading XML file: " + e.getMessage());
        }
    }


    @Override
    public void writeData(TransactionData data, String fileName) throws IOException {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.newDocument();

            Element root = doc.createElement("TransactionData");
            doc.appendChild(root);

            for (TransactionData.Transaction transaction : data.getTransactions()) {
                Element transactionElement = doc.createElement("transaction");

                Element amountElement = doc.createElement("amount");
                amountElement.appendChild(doc.createTextNode(String.valueOf(transaction.getAmount())));
                transactionElement.appendChild(amountElement);

                Element currencyElement = doc.createElement("currency");
                currencyElement.appendChild(doc.createTextNode(transaction.getCurrency()));
                transactionElement.appendChild(currencyElement);

                Element targetCurrencyElement = doc.createElement("targetCurrency");
                targetCurrencyElement.appendChild(doc.createTextNode(transaction.getTargetCurrency()));
                transactionElement.appendChild(targetCurrencyElement);

                root.appendChild(transactionElement);
            }

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");

            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(fileName));
            transformer.transform(source, result);
        } catch (ParserConfigurationException | TransformerException e) {
            e.printStackTrace();
            throw new IOException("Error writing XML file: " + e.getMessage());
        }
    }